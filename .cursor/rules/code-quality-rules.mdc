---
description: Side Job Data Engine プロジェクトのコード品質向上ルール
globs: ["**/*.go", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.sql"]
alwaysApply: false
---

# Cursor Rules for Side Job Data Engine

## コード品質向上ルール

### 全般的な品質基準
- すべてのコードは読みやすく、理解しやすいものであること
- 適切なコメントとドキュメントを追加すること
- 一貫した命名規則を使用すること
- エラーハンドリングを適切に実装すること
- セキュリティのベストプラクティスに従うこと

### Go（バックエンド）品質ルール
- 関数は単一責任の原則に従うこと（50行以内を推奨）
- エラーハンドリングは明示的に行い、適切なエラーメッセージを返すこと
- 構造体のフィールドには適切なタグを付けること
- インターフェースを活用してテスト可能性を高めること
- パッケージ名は短く、説明的であること
- エクスポートする関数・構造体には必ずコメントを付けること
- テストカバレッジは80%以上を目標とする
- 依存性注入を活用してテスタビリティを向上させること

### TypeScript/React（フロントエンド）品質ルール
- コンポーネントは単一責任の原則に従うこと
- TypeScriptの型安全性を最大限活用すること
- カスタムフックを使用してロジックを分離すること
- 適切なエラーバウンダリを実装すること
- アクセシビリティ（a11y）のベストプラクティスに従うこと
- パフォーマンス最適化（React.memo、useMemo、useCallback）を適切に使用すること
- 状態管理は適切なライブラリ（Zustand、Redux等）を使用すること

### データベース品質ルール
- マイグレーションファイルは冪等性を保つこと
- 適切なインデックスを設定すること
- SQLインジェクション対策を実装すること
- データベース接続プールを適切に設定すること
- トランザクションを適切に使用すること

### API設計品質ルール
- RESTful APIの設計原則に従うこと
- 適切なHTTPステータスコードを使用すること
- リクエスト・レスポンスのバリデーションを実装すること
- APIドキュメントを自動生成すること
- レート制限を実装すること
- CORS設定を適切に行うこと

### セキュリティ品質ルール
- 環境変数を適切に管理すること
- パスワードはハッシュ化して保存すること
- JWTトークンの適切な管理を行うこと
- 入力値のサニタイゼーションを実装すること
- HTTPS通信を強制すること
- セキュリティヘッダーを適切に設定すること

### テスト品質ルール
- 単体テスト、統合テスト、E2Eテストを適切に実装すること
- テストは独立して実行可能であること
- モックとスタブを適切に使用すること
- テストデータは適切に管理すること
- CI/CDパイプラインでテストを自動実行すること

### パフォーマンス品質ルール
- データベースクエリの最適化を行うこと
- キャッシュ戦略を適切に実装すること
- 画像やアセットの最適化を行うこと
- バンドルサイズの最適化を行うこと
- メモリリークを防ぐこと

### コードレビュー品質ルール
- プルリクエストには適切な説明を付けること
- コードレビューでは機能性、可読性、保守性を確認すること
- 自動化されたチェック（lint、format、test）を通過すること
- セキュリティレビューを実施すること

### ドキュメント品質ルール
- READMEファイルを適切に更新すること
- APIドキュメントを最新に保つこと
- アーキテクチャ図を維持すること
- デプロイメント手順を文書化すること
- トラブルシューティングガイドを提供すること

### 開発プロセス品質ルール
- Gitコミットメッセージは説明的であること
- ブランチ戦略を適切に運用すること
- 継続的インテグレーションを実装すること
- 自動化されたデプロイメントを実装すること
- 監視とログ収集を適切に設定すること

## コード生成時の指示
- 上記の品質ルールに従ってコードを生成すること
- 必要に応じてコメントやドキュメントを追加すること
- エラーハンドリングを適切に実装すること
- テストコードも同時に生成すること
- セキュリティの観点からコードをレビューすること